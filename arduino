#define HOST_NAME   "api.heclouds.com"
#define DEVICEID    "503192739" //OneNet上的设备ID
#define PROJECTID   "184777" //OneNet上的产品ID
#define HOST_PORT   (80)
String apiKey = "O7=xujOVdmRoRTUh4rYTTDnrcWU= "; //与你的设备绑定的APIKey

#define INTERVAL_SENSOR   17000             //定义传感器采样时间间隔  597000
#define INTERVAL_NET      17000             //定义发送时间
//传感器部分================================
#include <Wire.h>                                  //调用库  
#include <ESP8266.h>
#include <I2Cdev.h>                                //调用库  
/*******温湿度*******/
#include <Microduino_SHT2x.h>
/*******光照*******/
#define  sensorPin_1  A0
#define IDLE_TIMEOUT_MS  3000      // Amount of time to wait (in milliseconds) with no data 
// received before closing the connection.  If you know the server
// you're accessing is quick to respond, you can reduce this value.
#define wave
//int wave
//WEBSITE
char buf[10];

#define INTERVAL_sensor 2000
unsigned long sensorlastTime = millis();

float tempOLED, humiOLED, lightnessOLED;

#define INTERVAL_OLED 1000

String mCottenData;
String jsonToSend;
//3,传感器值的设置
float sensor_tem, sensor_hum,sensor_lux, sensor_wave;                   //传感器温度、湿度、光照
char  sensor_tem_c[7], sensor_hum_c[7], sensor_lux_c[7], sensor_wave_c[7] ;   //换成char数组传输
#include <SoftwareSerial.h>
#define EspSerial mySerial
#define UARTSPEED  9600
SoftwareSerial mySerial(2, 3); /* RX:D3, TX:D2 */
ESP8266 wifi(&EspSerial);
//ESP8266 wifi(Serial1);                                      //定义一个ESP8266（wifi）的对象
unsigned long net_time1 = millis();                          //数据上传服务器时间
unsigned long sensor_time = millis();                        //传感器采样时间计时器

//int SensorData;                                   //用于存储传感器数据
String postString;                                //用于存储发送数据的字符串
//String jsonToSend;                                //用于存储发送的json格式参数

//Tem_Hum_S2 TempMonitor;
/****************** WIFI ******************************/
#include <SoftwareSerial.h>
//SoftwareSerial mySerial(2, 3);  // 对于Core必须使用软串口进行WIFI模块通信
#define esp8266Serial mySerial   // 定义WIFI模块通信串口

char serialbuffer[1000];  //url储存
String dataToSend;  //AT指令储存
String startcommand;
String sendcommand;
String dataToRead = ""; //指令读取
/****************** WIFI done**************************/
int a = 800;
const int TrigPin = 4; //发送超声波
const int EchoPin = 5; //接收超声波
float cm;
void setup()
{
  esp8266Serial.begin(9600);//connection to ESP8266
  Serial.begin(9600);//rial debug
  esp8266Init();
  pinMode(10, OUTPUT); //设置输出口
  pinMode(TrigPin, OUTPUT);
  pinMode(EchoPin, INPUT);
  //初始化串口波特率
  Wire.begin();
  Serial.begin(9600);
  while (!Serial); // wait for Leonardo enumeration, others continue immediately
  Serial.print(F("setup begin\r\n"));
  delay(100);
  pinMode(sensorPin_1, INPUT);
}

void loop()
{
  if (Serial.available() > 0) {
    dataToSend = Serial.readStringUntil('\n');
    Serial.println("CMD:" + dataToSend);
    esp8266Serial.println(dataToSend);
    dataToSend = "";
  }

  if (esp8266Serial.available() > 0) {
    dataToRead = esp8266Serial.readStringUntil('\n');
    Serial.println(dataToRead);
    dataToRead = "";
  }
  int n = analogRead(A3);   //读取模拟口A3，获取光强
  Serial.println(n);               // 用于IDE串口观察窗
  if (n >= a )                        //对光强进行判断
    digitalWrite(10, HIGH);
  else
    digitalWrite(10, LOW);
  delay(100);       //防止串口写入速度过快
  // 产生一个10us的高电平脉冲去触发TrigPin
  digitalWrite(TrigPin, LOW);
  delayMicroseconds(4);
  digitalWrite(TrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigPin, LOW);

  // 检测脉冲宽度，并计算出距离
  cm = pulseIn(EchoPin, HIGH) / 58.0;
  //通过串口监视器输出
  Serial.print("Distance:"); Serial.println(cm);
  delay(100);
  if (sensor_time > millis())  sensor_time = millis();

  if (millis() - sensor_time > INTERVAL_SENSOR)             //传感器采样时间间隔
  {
    getSensorData();                                        //读串口中的传感器数据
    sensor_time = millis();
  }


  if (net_time1 > millis())  net_time1 = millis();

  if (millis() - net_time1 > INTERVAL_NET)                  //发送数据时间间隔
  {
    updateSensorData();                                     //将数据上传到服务器的函数
    net_time1 = millis();
  }

}

void esp8266Init() {
  esp8266Serial.println("AT");
  delay(100);
  esp8266Serial.println("AT+RST");
  delay(100);
  Serial.println("SETUP FINISHED!WELCOME! Fixed by: YK");
}
void getSensorData(){  
    //sensor_tem = TempMonitor.getTemperature();  
    //sensor_hum = TempMonitor.getHumidity();   
    //获取光照
    sensor_lux = analogRead(A0);    
    delay(1000);
    dtostrf(sensor_tem, 2, 1, sensor_tem_c);
    dtostrf(sensor_hum, 2, 1, sensor_hum_c);
    dtostrf(sensor_lux, 3, 1, sensor_lux_c);
}
void updateSensorData() {
  if (wifi.createTCP(HOST_NAME, HOST_PORT)) { //建立TCP连接，如果失败，不能发送该数据
    Serial.print("create tcp ok\r\n");

 jsonToSend="{\"Temperature\":";
    dtostrf(sensor_tem,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";
    jsonToSend+=",\"Humidity\":";
    dtostrf(sensor_hum,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";   
    jsonToSend += ",\"Light\":";
    dtostrf(sensor_lux, 1, 2, buf);
    jsonToSend += "\"" + String(buf) + "\"";
    jsonToSend += ",\"wave\":";
    dtostrf(cm, 1, 2, buf);
    jsonToSend += "\"" + String(buf) + "\"";
    jsonToSend += "}";



    postString = "POST /devices/";
    postString += DEVICEID;
    postString += "/datapoints?type=3 HTTP/1.1";
    postString += "\r\n";
    postString += "api-key:";
    postString += apiKey;
    postString += "\r\n";
    postString += "Host:api.heclouds.com\r\n";
    postString += "Connection:close\r\n";
    postString += "Content-Length:";
    postString += jsonToSend.length();
    postString += "\r\n";
    postString += "\r\n";
    postString += jsonToSend;
    postString += "\r\n";
    postString += "\r\n";
    postString += "\r\n";

    const char *postArray = postString.c_str();                 //将str转化为char数组
    Serial.println(postArray);
    wifi.send((const uint8_t*)postArray, strlen(postArray));    //send发送命令，参数必须是这两种格式，尤其是(const uint8_t*)
    Serial.println("send success");
    if (wifi.releaseTCP()) {                                 //释放TCP连接
      Serial.print("release tcp ok\r\n");
    }
    else {
      Serial.print("release tcp err\r\n");
    }
    postArray = NULL;                                       //清空数组，等待下次传输数据

  } else {
    Serial.print("create tcp err\r\n");
  }
}
